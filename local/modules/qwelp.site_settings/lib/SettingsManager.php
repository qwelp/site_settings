<?php/** * Класс для работы с настройками сайта * * @package qwelp.site_settings */namespace Qwelp\SiteSettings;use Bitrix\Main\Loader;use Bitrix\Main\SystemException;use Bitrix\Main\Localization\Loc;Loc::loadMessages(__FILE__);/** * Класс SettingsManager для работы с настройками сайта */class SettingsManager{    /**     * Код инфоблока с настройками     * @var string     */    const IBLOCK_CODE = 'site_settings';    /**     * Тип инфоблока с настройками     * @var string     */    const IBLOCK_TYPE = 'site_settings';    /**     * ID инфоблока с настройками     * @var int|null     */    protected static $iblockId = null;    /**     * Получает ID инфоблока с настройками     *     * @return int|false     * @throws SystemException     */    protected static function getIblockId()    {        if (self::$iblockId !== null) {            return self::$iblockId;        }        if (!Loader::includeModule('iblock')) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_MODULE_NOT_INSTALLED'));        }        $iblockRes = \CIBlock::GetList(            [],            [                'CODE'              => self::IBLOCK_CODE,                'TYPE'              => self::IBLOCK_TYPE,                'CHECK_PERMISSIONS' => 'N',            ]        );        if ($iblock = $iblockRes->Fetch()) {            self::$iblockId = (int)$iblock['ID'];            return self::$iblockId;        }        return false;    }    /**     * Получает настройки сайта в виде иерархической структуры разделов и элементов     *     * @param string|null $siteId ID сайта     * @return array     * @throws SystemException     */    public static function getSettings($siteId = null)    {        if ($siteId === null) {            $siteId = \Bitrix\Main\Application::getInstance()->getContext()->getSite();        }        $iblockId = self::getIblockId();        if (!$iblockId) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_NOT_FOUND'));        }        // 1) Получаем ВСЕ разделы инфоблока (чтобы построить дерево)        $allSections = [];        $sectionsRes = \CIBlockSection::GetList(            ['SORT' => 'ASC'],            [                'IBLOCK_ID'         => $iblockId,                'ACTIVE'            => 'Y',            ],            false,            [                'ID',                'IBLOCK_SECTION_ID',                'NAME',                'CODE',                'SORT',                'DEPTH_LEVEL',                'UF_ENABLE_DRAG_AND_DROP',                'UF_DETAIL_PROPERTY',            ]        );        while ($sec = $sectionsRes->Fetch()) {            $secId     = (int)$sec['ID'];            $parentId  = (int)$sec['IBLOCK_SECTION_ID'];            $depth     = (int)$sec['DEPTH_LEVEL'];            $allSections[$secId] = [                'ID'                     => $secId,                'PARENT_ID'              => $parentId,                'id'                     => $sec['CODE'],                'title'                  => $sec['NAME'],                'SORT'                   => (int)$sec['SORT'],                'DEPTH'                  => $depth,                'UF_ENABLE_DRAG_AND_DROP'=> (int)$sec['UF_ENABLE_DRAG_AND_DROP'],                'UF_DETAIL_PROPERTY'     => (int)$sec['UF_DETAIL_PROPERTY'],                'SUBSECTIONS'            => [],                'settings'               => [],            ];        }        // 2) Строим дерево разделов        foreach ($allSections as $secId => &$secData) {            $parentId = $secData['PARENT_ID'];            if ($parentId > 0 && isset($allSections[$parentId])) {                $allSections[$parentId]['SUBSECTIONS'][$secId] = &$secData;            }        }        unset($secData);        // 3) Получаем ВСЕ элементы (настройки) инфоблока и распределяем по разделам        $elementsRes = \CIBlockElement::GetList(            ['SORT' => 'ASC'],            [                'IBLOCK_ID' => $iblockId,                'ACTIVE'    => 'Y',                'SITE_ID'   => [$siteId, false],            ],            false,            false,            []        );        while ($elem = $elementsRes->GetNextElement()) {            $fields = $elem->GetFields();            $props  = $elem->GetProperties();            $secId = (int)$fields['IBLOCK_SECTION_ID'];            if (!isset($allSections[$secId])) {                continue;            }            // Получаем тип из свойства TYPE, если задан            $typeFromProp = strtolower(trim($props['TYPE']['VALUE'] ?? ''));            // Собираем сырые опции из VALUES            $raw = $props['VALUES']['~VALUE'] ?? '';            $parsedOptions = [];            if ($raw !== '') {                if (preg_match('/([\[\{].*)$/s', $raw, $m)) {                    $opts = json_decode($m[1], true);                    if (json_last_error() === JSON_ERROR_NONE) {                        $parsedOptions = $opts;                    }                }            }            // Определяем type по parsedOptions, если не задан явно            if ($typeFromProp === '') {                if (isset($parsedOptions['checkbox'])) {                    $type = 'checkbox';                } elseif (isset($parsedOptions['radio'])) {                    $type = 'radio';                } elseif (isset($parsedOptions['select'])) {                    $type = 'select';                } elseif (isset($parsedOptions['radioImage'])) {                    $type = 'radioImage';                } elseif (isset($parsedOptions['color'])) {                    $type = 'color';                } else {                    $type = '';                }            } else {                $type = $typeFromProp;            }            // Формируем структуру настройки            $setting = [                'code'           => $fields['CODE'],                'label'          => $fields['NAME'],                'type'           => $type,                'helpText'       => $props['HELP_TEXT']['VALUE'] ?? '',                'helpImage'      => null,                'showTitle'      => $props['SHOW_TITLE']['VALUE'] ?? '',                'percent'      => $props['PERCENT']['VALUE'] ?? '',                'detailProperty' => $props['DETAIL_PROPERTY']['VALUE'] ?? '',                'options'        => [],            ];            // Подсказка-изображение            if (!empty($props['HELP_IMAGE']['VALUE'])) {                $file = \CFile::GetFileArray($props['HELP_IMAGE']['VALUE']);                if ($file) {                    $setting['helpImage'] = $file['SRC'];                }            }            // Разбираем опции: если parsedOptions соответствует формату            if ($parsedOptions) {                if ($type !== '' && isset($parsedOptions[$type]) && is_array($parsedOptions[$type])) {                    $setting['options'] = $parsedOptions[$type];                } elseif (is_array($parsedOptions)) {                    $setting['options'] = $parsedOptions;                }            }            // Если у вариантов есть fileId (для radioImage), подменяем pathFile            if ($type === 'radioImage' && is_array($setting['options'])) {                foreach ($setting['options'] as &$opt) {                    // Возможные ключи: value, label, pathFile, fileId                    if (!empty($opt['fileId'])) {                        $fileSrc = \CFile::GetPath((int)$opt['fileId']);                        if ($fileSrc) {                            $opt['pathFile'] = $fileSrc;                        }                    }                }                unset($opt);            }            // Добавляем настройку в раздел            $allSections[$secId]['settings'][] = $setting;        }        // 4) Формируем результирующий массив: только корневые разделы (PARENT_ID = 0), сортируем        $resultSections = [];        foreach ($allSections as $secId => $secData) {            if ($secData['PARENT_ID'] === 0) {                $resultSections[] = $secData;            }        }        usort($resultSections, fn($a, $b) => $a['SORT'] <=> $b['SORT']);        return ['sections' => $resultSections];    }    /**     * Сохраняет настройки сайта     *     * @param string $siteId ID сайта     * @param array  $data   Данные настроек     * @return bool     * @throws SystemException     */    public static function saveSettings($siteId, $data)    {        $iblockId = self::getIblockId();        if (!$iblockId) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_NOT_FOUND'));        }        if (!isset($data['sections']) || !is_array($data['sections'])) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_INVALID_DATA'));        }        // Получаем все разделы инфоблока, чтобы сопоставить code → ID        $sectionsRes = \CIBlockSection::GetList(            [],            [                'IBLOCK_ID' => $iblockId,                'ACTIVE'    => 'Y',            ],            false,            ['ID', 'CODE']        );        $sectionIds = [];        while ($section = $sectionsRes->Fetch()) {            $sectionIds[$section['CODE']] = $section['ID'];        }        foreach ($data['sections'] as $section) {            if (!isset($section['id']) || !isset($section['settings']) || !is_array($section['settings'])) {                continue;            }            $sectionId = $sectionIds[$section['id']] ?? 0;            if (!$sectionId) {                continue;            }            foreach ($section['settings'] as $code => $value) {                if (empty($code)) {                    continue;                }                // Ищем элемент по коду                $elementRes = \CIBlockElement::GetList(                    [],                    [                        'IBLOCK_ID'         => $iblockId,                        'CODE'              => $code,                        'IBLOCK_SECTION_ID' => $sectionId,                        'SITE_ID'           => [$siteId, false],                    ],                    false,                    ['nTopCount' => 1],                    ['ID']                );                if ($elemFetch = $elementRes->Fetch()) {                    $elementId = $elemFetch['ID'];                    $propValues = [];                    // Обновляем тип                    if (isset($value['type'])) {                        $propValues['TYPE'] = $value['type'];                    }                    // Обновляем текст подсказки                    if (isset($value['helpText'])) {                        $propValues['HELP_TEXT'] = $value['helpText'];                    }                    // Обновляем изображение подсказки                    if (isset($value['helpImage'])) {                        // В реальном сценарии нужно загрузить файл, получить его ID.                        // Здесь сохраняем путь напрямую.                        $propValues['HELP_IMAGE'] = $value['helpImage'];                    }                    // Обновляем опции                    if (isset($value['options']) && is_array($value['options'])) {                        $propValues['VALUES'] = [                            'TEXT' => json_encode($value['options'], JSON_UNESCAPED_UNICODE),                            'TYPE' => 'html',                        ];                    }                    if (!empty($propValues)) {                        \CIBlockElement::SetPropertyValuesEx($elementId, $iblockId, $propValues);                    }                }                // Если элемента нет, он пропускается (без создания нового)            }        }        return true;    }    /**     * Получает настройки сайта в формате JSON     *     * @param string|null $siteId ID сайта     * @return string JSON-строка с настройками     * @throws SystemException     */    public static function getSettingsJson($siteId = null)    {        $settings = self::getSettings($siteId);        return json_encode($settings, JSON_UNESCAPED_UNICODE);    }    /**     * Получает данные отдельного параметра по его коду     *     * @param string      $code      Символьный код параметра     * @param string|null $sectionId Символьный код раздела (если известен)     * @param string|null $siteId    ID сайта     * @return array|null Массив с данными параметра или null     * @throws SystemException     */    public static function getParameter($code, $sectionId = null, $siteId = null)    {        $settings = self::getSettings($siteId);        // Если указан раздел – ищем в нём        if ($sectionId !== null) {            foreach ($settings['sections'] as $sec1) {                if ($sec1['id'] === $sectionId) {                    // уровень 1                    foreach ($sec1['settings'] as $setting) {                        if ($setting['code'] === $code) {                            return $setting;                        }                    }                    // уровень 2                    foreach ($sec1['SUBSECTIONS'] as $sec2) {                        if ($sec2['id'] === $sectionId) {                            foreach ($sec2['settings'] as $setting) {                                if ($setting['code'] === $code) {                                    return $setting;                                }                            }                        }                        // уровень 3                        foreach ($sec2['SUBSECTIONS'] as $sec3) {                            if ($sec3['id'] === $sectionId) {                                foreach ($sec3['settings'] as $setting) {                                    if ($setting['code'] === $code) {                                        return $setting;                                    }                                }                            }                        }                    }                    return null;                }            }            return null;        }        // Если раздел не указан, ищем по всем уровням        foreach ($settings['sections'] as $sec1) {            foreach ($sec1['settings'] as $setting) {                if ($setting['code'] === $code) {                    return $setting;                }            }            foreach ($sec1['SUBSECTIONS'] as $sec2) {                foreach ($sec2['settings'] as $setting) {                    if ($setting['code'] === $code) {                        return $setting;                    }                }                foreach ($sec2['SUBSECTIONS'] as $sec3) {                    foreach ($sec3['settings'] as $setting) {                        if ($setting['code'] === $code) {                            return $setting;                        }                    }                }            }        }        return null;    }    /**     * Получает только значение параметра по его коду     *     * @param string      $code         Символьный код параметра     * @param mixed       $defaultValue Значение по умолчанию, если не найден     * @param string|null $sectionId    Символьный код раздела (если известен)     * @param string|null $siteId       ID сайта     * @return mixed Значение параметра или default     * @throws SystemException     */    public static function getParameterValue($code, $defaultValue = null, $sectionId = null, $siteId = null)    {        $param = self::getParameter($code, $sectionId, $siteId);        if ($param === null) {            return $defaultValue;        }        if ($param['type'] === 'checkbox') {            return !empty($param['options'][0]['value']);        } elseif (in_array($param['type'], ['select', 'radio', 'radioImage', 'color'], true)) {            if (!empty($param['options'][0]['value'])) {                return $param['options'][0]['value'];            }        }        return $defaultValue;    }}
/** * Класс для работы с настройками сайта * * @package qwelp.site_settings */namespace Qwelp\SiteSettings;use Bitrix\Main\Loader;use Bitrix\Main\SystemException;use Bitrix\Main\Localization\Loc;Loc::loadMessages(__FILE__);/** * Класс SettingsManager для работы с настройками сайта */class SettingsManager{    /**     * Код инфоблока с настройками     * @var string     */    const IBLOCK_CODE = 'site_settings';    /**     * Тип инфоблока с настройками     * @var string     */    const IBLOCK_TYPE = 'site_settings';    /**     * ID инфоблока с настройками     * @var int|null     */    protected static $iblockId = null;    /**     * Получает ID инфоблока с настройками     *     * @return int|false     * @throws SystemException     */    protected static function getIblockId()    {        if (self::$iblockId !== null) {            return self::$iblockId;        }        if (!Loader::includeModule('iblock')) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_MODULE_NOT_INSTALLED'));        }        $iblockRes = \CIBlock::GetList(            [],            [                'CODE'              => self::IBLOCK_CODE,                'TYPE'              => self::IBLOCK_TYPE,                'CHECK_PERMISSIONS' => 'N',            ]        );        if ($iblock = $iblockRes->Fetch()) {            self::$iblockId = (int)$iblock['ID'];            return self::$iblockId;        }        return false;    }    /**     * Получает настройки сайта в виде иерархической структуры разделов и элементов     *     * @param string|null $siteId ID сайта     * @return array     * @throws SystemException     */    public static function getSettings($siteId = null)    {        if ($siteId === null) {            $siteId = \Bitrix\Main\Application::getInstance()->getContext()->getSite();        }        $iblockId = self::getIblockId();        if (!$iblockId) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_NOT_FOUND'));        }        // 1) Получаем ВСЕ разделы инфоблока (чтобы построить дерево)        $allSections = [];        $sectionsRes = \CIBlockSection::GetList(            ['SORT' => 'ASC'],            [                'IBLOCK_ID'         => $iblockId,                'ACTIVE'            => 'Y',            ],            false,            [                'ID',                'IBLOCK_SECTION_ID',                'NAME',                'CODE',                'SORT',                'DEPTH_LEVEL',                'UF_ENABLE_DRAG_AND_DROP',                'UF_DETAIL_PROPERTY',            ]        );        while ($sec = $sectionsRes->Fetch()) {            $secId     = (int)$sec['ID'];            $parentId  = (int)$sec['IBLOCK_SECTION_ID'];            $depth     = (int)$sec['DEPTH_LEVEL'];            $allSections[$secId] = [                'ID'                     => $secId,                'PARENT_ID'              => $parentId,                'id'                     => $sec['CODE'],                'title'                  => $sec['NAME'],                'SORT'                   => (int)$sec['SORT'],                'DEPTH'                  => $depth,                'UF_ENABLE_DRAG_AND_DROP'=> (int)$sec['UF_ENABLE_DRAG_AND_DROP'],                'UF_DETAIL_PROPERTY'     => (int)$sec['UF_DETAIL_PROPERTY'],                'SUBSECTIONS'            => [],                'settings'               => [],            ];        }        // 2) Строим дерево разделов        foreach ($allSections as $secId => &$secData) {            $parentId = $secData['PARENT_ID'];            if ($parentId > 0 && isset($allSections[$parentId])) {                $allSections[$parentId]['SUBSECTIONS'][$secId] = &$secData;            }        }        unset($secData);        // 3) Получаем ВСЕ элементы (настройки) инфоблока и распределяем по разделам        $elementsRes = \CIBlockElement::GetList(            ['SORT' => 'ASC'],            [                'IBLOCK_ID' => $iblockId,                'ACTIVE'    => 'Y',                'SITE_ID'   => [$siteId, false],            ],            false,            false,            []        );        while ($elem = $elementsRes->GetNextElement()) {            $fields = $elem->GetFields();            $props  = $elem->GetProperties();            $secId = (int)$fields['IBLOCK_SECTION_ID'];            if (!isset($allSections[$secId])) {                continue;            }            // Получаем тип из свойства TYPE, если задан            $typeFromProp = strtolower(trim($props['TYPE']['VALUE'] ?? ''));            // Собираем сырые опции из VALUES            $raw = $props['VALUES']['~VALUE'] ?? '';            $parsedOptions = [];            if ($raw !== '') {                if (preg_match('/([\[\{].*)$/s', $raw, $m)) {                    $opts = json_decode($m[1], true);                    if (json_last_error() === JSON_ERROR_NONE) {                        $parsedOptions = $opts;                    }                }            }            // Определяем type по parsedOptions, если не задан явно            if ($typeFromProp === '') {                if (isset($parsedOptions['checkbox'])) {                    $type = 'checkbox';                } elseif (isset($parsedOptions['radio'])) {                    $type = 'radio';                } elseif (isset($parsedOptions['select'])) {                    $type = 'select';                } elseif (isset($parsedOptions['radioImage'])) {                    $type = 'radioImage';                } else {                    $type = '';                }            } else {                $type = $typeFromProp;            }            // Формируем структуру настройки            $setting = [                'code'           => $fields['CODE'],                'label'          => $fields['NAME'],                'type'           => $type,                'helpText'       => $props['HELP_TEXT']['VALUE'] ?? '',                'helpImage'      => null,                'showTitle'      => $props['SHOW_TITLE']['VALUE'] ?? '',                'percent'      => $props['PERCENT']['VALUE'] ?? '',                'detailProperty' => $props['DETAIL_PROPERTY']['VALUE'] ?? '',                'options'        => [],            ];            // Подсказка-изображение            if (!empty($props['HELP_IMAGE']['VALUE'])) {                $file = \CFile::GetFileArray($props['HELP_IMAGE']['VALUE']);                if ($file) {                    $setting['helpImage'] = $file['SRC'];                }            }            // Разбираем опции: если parsedOptions соответствует формату            if ($parsedOptions) {                if ($type !== '' && isset($parsedOptions[$type]) && is_array($parsedOptions[$type])) {                    $setting['options'] = $parsedOptions[$type];                } elseif (is_array($parsedOptions)) {                    $setting['options'] = $parsedOptions;                }            }            // Если у вариантов есть fileId (для radioImage), подменяем pathFile            if ($type === 'radioImage' && is_array($setting['options'])) {                foreach ($setting['options'] as &$opt) {                    // Возможные ключи: value, label, pathFile, fileId                    if (!empty($opt['fileId'])) {                        $fileSrc = \CFile::GetPath((int)$opt['fileId']);                        if ($fileSrc) {                            $opt['pathFile'] = $fileSrc;                        }                    }                }                unset($opt);            }            // Добавляем настройку в раздел            $allSections[$secId]['settings'][] = $setting;        }        // 4) Формируем результирующий массив: только корневые разделы (PARENT_ID = 0), сортируем        $resultSections = [];        foreach ($allSections as $secId => $secData) {            if ($secData['PARENT_ID'] === 0) {                $resultSections[] = $secData;            }        }        usort($resultSections, fn($a, $b) => $a['SORT'] <=> $b['SORT']);        return ['sections' => $resultSections];    }    /**     * Сохраняет настройки сайта     *     * @param string $siteId ID сайта     * @param array  $data   Данные настроек     * @return bool     * @throws SystemException     */    public static function saveSettings($siteId, $data)    {        $iblockId = self::getIblockId();        if (!$iblockId) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_IBLOCK_NOT_FOUND'));        }        if (!isset($data['sections']) || !is_array($data['sections'])) {            throw new SystemException(Loc::getMessage('QWELP_SITE_SETTINGS_INVALID_DATA'));        }        // Получаем все разделы инфоблока, чтобы сопоставить code → ID        $sectionsRes = \CIBlockSection::GetList(            [],            [                'IBLOCK_ID' => $iblockId,                'ACTIVE'    => 'Y',            ],            false,            ['ID', 'CODE']        );        $sectionIds = [];        while ($section = $sectionsRes->Fetch()) {            $sectionIds[$section['CODE']] = $section['ID'];        }        foreach ($data['sections'] as $section) {            if (!isset($section['id']) || !isset($section['settings']) || !is_array($section['settings'])) {                continue;            }            $sectionId = $sectionIds[$section['id']] ?? 0;            if (!$sectionId) {                continue;            }            foreach ($section['settings'] as $code => $value) {                if (empty($code)) {                    continue;                }                // Ищем элемент по коду                $elementRes = \CIBlockElement::GetList(                    [],                    [                        'IBLOCK_ID'         => $iblockId,                        'CODE'              => $code,                        'IBLOCK_SECTION_ID' => $sectionId,                        'SITE_ID'           => [$siteId, false],                    ],                    false,                    ['nTopCount' => 1],                    ['ID']                );                if ($elemFetch = $elementRes->Fetch()) {                    $elementId = $elemFetch['ID'];                    $propValues = [];                    // Обновляем тип                    if (isset($value['type'])) {                        $propValues['TYPE'] = $value['type'];                    }                    // Обновляем текст подсказки                    if (isset($value['helpText'])) {                        $propValues['HELP_TEXT'] = $value['helpText'];                    }                    // Обновляем изображение подсказки                    if (isset($value['helpImage'])) {                        // В реальном сценарии нужно загрузить файл, получить его ID.                        // Здесь сохраняем путь напрямую.                        $propValues['HELP_IMAGE'] = $value['helpImage'];                    }                    // Обновляем опции                    if (isset($value['options']) && is_array($value['options'])) {                        $propValues['VALUES'] = [                            'TEXT' => json_encode($value['options'], JSON_UNESCAPED_UNICODE),                            'TYPE' => 'html',                        ];                    }                    if (!empty($propValues)) {                        \CIBlockElement::SetPropertyValuesEx($elementId, $iblockId, $propValues);                    }                }                // Если элемента нет, он пропускается (без создания нового)            }        }        return true;    }    /**     * Получает настройки сайта в формате JSON     *     * @param string|null $siteId ID сайта     * @return string JSON-строка с настройками     * @throws SystemException     */    public static function getSettingsJson($siteId = null)    {        $settings = self::getSettings($siteId);        return json_encode($settings, JSON_UNESCAPED_UNICODE);    }    /**     * Получает данные отдельного параметра по его коду     *     * @param string      $code      Символьный код параметра     * @param string|null $sectionId Символьный код раздела (если известен)     * @param string|null $siteId    ID сайта     * @return array|null Массив с данными параметра или null     * @throws SystemException     */    public static function getParameter($code, $sectionId = null, $siteId = null)    {        $settings = self::getSettings($siteId);        // Если указан раздел – ищем в нём        if ($sectionId !== null) {            foreach ($settings['sections'] as $sec1) {                if ($sec1['id'] === $sectionId) {                    // уровень 1                    foreach ($sec1['settings'] as $setting) {                        if ($setting['code'] === $code) {                            return $setting;                        }                    }                    // уровень 2                    foreach ($sec1['SUBSECTIONS'] as $sec2) {                        if ($sec2['id'] === $sectionId) {                            foreach ($sec2['settings'] as $setting) {                                if ($setting['code'] === $code) {                                    return $setting;                                }                            }                        }                        // уровень 3                        foreach ($sec2['SUBSECTIONS'] as $sec3) {                            if ($sec3['id'] === $sectionId) {                                foreach ($sec3['settings'] as $setting) {                                    if ($setting['code'] === $code) {                                        return $setting;                                    }                                }                            }                        }                    }                    return null;                }            }            return null;        }        // Если раздел не указан, ищем по всем уровням        foreach ($settings['sections'] as $sec1) {            foreach ($sec1['settings'] as $setting) {                if ($setting['code'] === $code) {                    return $setting;                }            }            foreach ($sec1['SUBSECTIONS'] as $sec2) {                foreach ($sec2['settings'] as $setting) {                    if ($setting['code'] === $code) {                        return $setting;                    }                }                foreach ($sec2['SUBSECTIONS'] as $sec3) {                    foreach ($sec3['settings'] as $setting) {                        if ($setting['code'] === $code) {                            return $setting;                        }                    }                }            }        }        return null;    }    /**     * Получает только значение параметра по его коду     *     * @param string      $code         Символьный код параметра     * @param mixed       $defaultValue Значение по умолчанию, если не найден     * @param string|null $sectionId    Символьный код раздела (если известен)     * @param string|null $siteId       ID сайта     * @return mixed Значение параметра или default     * @throws SystemException     */    public static function getParameterValue($code, $defaultValue = null, $sectionId = null, $siteId = null)    {        $param = self::getParameter($code, $sectionId, $siteId);        if ($param === null) {            return $defaultValue;        }        if ($param['type'] === 'checkbox') {            return !empty($param['options'][0]['value']);        } elseif (in_array($param['type'], ['select', 'radio', 'radioImage'], true)) {            if (!empty($param['options'][0]['value'])) {                return $param['options'][0]['value'];            }        }        return $defaultValue;    }}